#!/usr/bin/env node

"use strict";

const fs = require("graceful-fs");
const path = require("path");

const OrchidLead = require("../lib/orchid-lead");
const program = require("commander");
const glob = require("glob");
const chokidar = require("chokidar");
const minimatch = require("minimatch");
const debounce = require("lodash/debounce");

const logger = require("eazy-logger").Logger({
    "prefix": "[{gray:OL}] ",
    "useLevelPrefixes": false
});

// setup watch command
program
    .usage("[options] [source files...]")
    .description("Watch source files for changes and regenerate output files on-demand.")
    .option("-C, --config <path>", "path to config file", ".orchidleadrc")
    .option("-c, --copy-static-files", "copy static files to output folder")
    .parse(process.argv);

let ol;

ol = new OrchidLead({
    output: program.output,
    site: program.site,
    helpers: program.helpers,
    layouts: program.layouts,
    pages: program.pages,
    partials: program.partials
});

const staticFilePatterns = [
    path.join(ol.path.pages, "**/*.css"),
    path.join(ol.path.pages, "**/!(*data).js"),
    path.join(ol.path.pages, "**/*.svg"),
    path.join(ol.path.pages, "**/*.png"),
    path.join(ol.path.pages, "**/*.(jpg|jpeg)"),
];

/**
 * find and build page file
 * supports building the hbs file that belongs to a data.js file
 * TODO find nearest HBS file
 */
function findPageFile (file) {

    var test;
    var elements = path.parse(file);
    
    if (elements.ext === ".hbs") {

        // if the extension is hbs then you found the page file
        return file;

    } else if (elements.ext === ".js" && elements.name.match(/\.data$/)) {

        // drop the .data extension and look for a file that matches
        elements.name = path.basename(elements.name, ".data");
        elements.ext = ".hbs";
        elements.base = null;
        test = path.format(elements);
        console.log(test);
        return test;

    } else {

        // don't go looking for a bunch of other files
        // causes extra builds at launch and is unnecessary
        // since CSS and JS are not injected into the HTML
        return;

        // change the extension to hbs and look for that file
        elements.ext = ".hbs";
        elements.base = null;
        test = path.format(elements);
        try {

            fs.accessSync(test, fs.constants.R_OK);
            return test;

        } catch (e) {

            // drop the .data extension and look for that file
            elements.name = path.basename(elements.name, ".data");
            test = path.format(elements);
            try {

                fs.accessSync(test, fs.constants.R_OK);
                return test;

            } catch (e) {

                // change the name to match the dirname and look for that file
                elements.name = path.basename(path.dirname(file));
                test = path.format(elements);
                try {

                    fs.accessSync(test, fs.constants.R_OK);
                    return test;

                } catch (e) {

                    // change the name to index and look for that file
                    elements.name = "index";
                    test = path.format(elements);
                    try {

                        fs.accessSync(test, fs.constants.R_OK);
                        return test;

                    } catch (e) {

                        // error, cannot find related page
                        logger.warn("Unable to find page file for %s", file);
                        return "";

                    }

                }

            }

        }

    }

}

function tryToCreate (file) {

    ol.create(file).then(function (outputPaths) {

        outputPaths.sort();
        outputPaths.forEach(outputPath => {
            if (outputPath) {
                logger.info("{cyan:File built:} {magenta:%s}", path.relative(ol.path.root, outputPath));
            } else {
                logger.info("{cyan:File not built:} {magenta:%s}", path.relative(ol.path.root, file));
            }
        });

    }).catch(function (err) {

        logger.error("{red:Build failed:} {magenta:%s}", path.relative(ol.path.root, file));
        logger.error("{red:%s}", err);

    });

}

function updateOrCreate (file) {

    // copy static files
    var match = false;
    program.copyStaticFiles && staticFilePatterns.forEach(function (pattern) {

        if (minimatch(file, pattern)) {

            match = true;
            ol.tryToCopyStaticFile(file);

        }

    });

    if (!match) {

        // find page file that coorisponds to the file that was chagned
        file = findPageFile(file);
        if (file) {

            tryToCreate(file);

        }

    }

}

function findAndCreate (file) {

    // ignore data.js files during an add event
    if (!file.match(/data\.js$/)) {
        logger.info("{cyan:File added:} {magenta:%s}", path.relative(ol.path.site, file));
        updateOrCreate(file);
    }

}

function findAndUpdate (file) {

    logger.info("{cyan:File changed:} {magenta:%s}", path.relative(ol.path.site, file));

    // if file is a data file, then delete it's entry from the require() cache
    if (file.match(/data\.js(on)?$/)) {

        delete require.cache[path.resolve(file)];

    }
    updateOrCreate(file);

}


function findAndDestroy (file) {

    logger.info("{cyan:File deleted:} {magenta:%s}", path.relative(ol.path.site, file));

    // remove static files
    program.copyStaticFiles && staticFilePatterns.forEach(function (pattern) {

        if (minimatch(file, pattern)) {

            ol.tryToDeleteStaticFile(file);

        }

    });

    // find page file that coorisponds to the file that was chagned
    file = findPageFile(file);
    if (file) {

        ol.destroy(file).then(function (outputPath) {

            logger.info("{cyan:File deleted:} {magenta:%s}", path.relative(ol.path.root, outputPath));

        }).catch(function (err) {

            throw err;

        });

    }

}

function buildAll (file) {

    logger.info("{cyan:File changed:} {magenta:%s}", path.relative(ol.path.site, file));

    let arg = path.join(ol.path.pages, "**/*.hbs");
    glob(arg, function processFiles (err, files) {
        if (err) {
            throw err;
        }

        if (files !== [arg]) {
            files.forEach(function processFile (file) {

                logger.info("{cyan:File added:} {magenta:%s}", path.relative(ol.path.pages, file));
                tryToCreate(file);

            });
        }
    });

}

function changeSiteAndBuildAll (file) {

    // if file is a data file, then delete it's entry from the require() cache
    if (file.match(/data\.js(on)?$/)) {

        delete require.cache[path.resolve(file)];

    }

    // reregister Handlebars helpers
    // reregister Handlebars partials
    // TODO is this really a good idea?
    ol = new OrchidLead({
        output: program.output,
        site: program.site,
        helpers: program.helpers,
        layouts: program.layouts,
        pages: program.pages,
        partials: program.partials
    });

    return buildAll(file);

}

// by default watch pages and build each page that changes
// additionally, watch site files and rebuild entire site when changed
if (program.args.length === 0) {

    program.args.push(ol.path.pages);

}

// setup watching the files specified
program.args.forEach(function processArg (arg) {

    var watcher = chokidar.watch(arg, {
        ignored: /[/\\]\./,
        persistent: true
    });

    watcher
        .on("add", findAndCreate)
        .on("change", findAndUpdate)
        .on("unlink", findAndDestroy);

});

// always watch site files and rebuild entire site when changed
var watcher = chokidar.watch([
    ol.path.helpers,
    ol.path.layouts,
    ol.path.partials,
    path.resolve(ol.path.site, "data.js")
], {
    ignored: /[/\\]\./,
    persistent: true
});

// avoid calling changeSiteAndBuildAll too often
watcher.on("change", debounce(changeSiteAndBuildAll, 400));

// watch static files if copy static files is enabled
if (program.copyStaticFiles) {

    var staticPath = path.join(ol.path.site, "static");
    var staticWatcher = chokidar.watch(staticPath, {
        ignored: /[/\\]\./,
        persistent: true
    });

    staticWatcher
        .on("add", function (file) {
            logger.info("{cyan:File added:} {magenta:%s}", path.relative(ol.path.site, file));
            ol.tryToCopyStaticFile(file);
        })
        .on("change", function (file) {
            logger.info("{cyan:File changed:} {magenta:%s}", path.relative(ol.path.site, file));
            ol.tryToCopyStaticFile(file);
        })
        .on("unlink", ol.tryToDeleteStaticFile);

}

logger.info("Watching files...");
