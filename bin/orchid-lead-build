#!/usr/bin/env node

"use strict";

var fs = require("fs");
var gracefulFs = require("graceful-fs");
gracefulFs.gracefulify(fs);

const path = require("path");
const pkg = require("../package.json");

const program = require("commander");
const glob = require("glob");
const logger    = require("eazy-logger").Logger({
    prefix: "[{gray:OL}] ",
    useLevelPrefixes: false
});

const OrchidLead = require("../lib/orchid-lead");

// setup build command
program
    .version(pkg.version)
    .description("Generate output files from the source files.")
    .usage("[options] [source files...]")
    .option("-c, --copy-static-files", "copy static files to output folder")
    .option("-s, --save-future-pub-dates", "save future publication dates")
    .parse(process.argv);

let basename, cwd, defaultFile, ol;

ol = new OrchidLead({
    config: program.config,
    output: program.output,
    site: program.site,
    helpers: program.helpers,
    layouts: program.layouts,
    pages: program.pages,
    partials: program.partials
});

if (program.args.length === 0) {

    // look for default files to process
    // look for a Handlebars file in the current work directory
    cwd = process.cwd();
    basename = path.basename(cwd);

    try {

        // look for a file that matches the directory name
        defaultFile = path.resolve(cwd, basename + ".hbs");
        fs.accessSync(defaultFile, fs.constants.R_OK);
        program.args.push(defaultFile);

    } catch (err) {

        try {

            // fallback to index.hbs
            defaultFile = path.resolve(cwd, "index.hbs");
            fs.accessSync(defaultFile, fs.constants.R_OK);
            program.args.push(defaultFile);

        } catch (err) {

            try {

                // otherwise build everything
                program.args.push(path.join(ol.path.pages, "**/*.hbs"));

            } catch (err) {

                throw err;

            }

        }

    }

}

// read and process the files specified
Promise.all(program.args.map(arg => {

    return new Promise((resolve, reject) => {

        // get all the files matching the arguement
        glob(arg, (err, files) => {
            if (err) {
                reject(err);
            } else {
                resolve(files);
            }

        });

    });

})).then(results => {

    // flatten the array of results
    let files = [].concat(...results);
    return Promise.all(files.map(file => {

        return ol.create(file).then(outputPaths => {

            outputPaths.sort();
            outputPaths.forEach(outputPath => {
                if (outputPath) {
                    logger.info("{cyan:File built:} {magenta:%s}", path.relative(ol.path.root, outputPath));
                } else {
                    logger.info("{cyan:File not built:} {magenta:%s}", path.relative(ol.path.root, file));
                }
            });

            return Promise.resolve(outputPaths);

        }).catch(err => {

            if (err.stack) {
                logger.error("{red:%s}", err.stack);
            } else {
                logger.error("{red:%s}", err);
            }
            logger.error("{red:Build failed:} {magenta:%s}", path.relative(ol.path.root, file));

            return Promise.reject(err);

        });

    }));

}).then(() => {

    // everything has been built
    logger.info("Build had no errors.");

}, err => {

    if (err.stack) {
        logger.error("{red:%s}", err.stack);
    } else {
        logger.error("{red:%s}", err);
    }
    logger.error("{red:Build had errors.}");

}).catch(err => {

    if (err.stack) {
        logger.error("{red:%s}", err.stack);
    } else {
        logger.error("{red:%s}", err);
    }

}).then(() => {

    finishUp();

});


function finishUp() {

    // (optionally) write publication dates to file
    if (program.saveFuturePubDates) {

        let dates = ol.getPublicationDates();

        if (dates && dates.length > 0) {

            let data = dates.map(date => {

                // saves dates in seconds since unix epoch
                // and a human reabable string for debugging
                let secondsSinceEpoch = Math.round(date.getTime() / 1000);
                let localeString = date.toString();
                return `${secondsSinceEpoch} ${localeString}`;

            }).join("\n") + "\n";
            fs.writeFile(path.join(ol.path.root, ".future-publication-dates"), data, (err) => {

                if (err) {
                    throw err;
                } else {
                    logger.info("Future publication dates saved.");
                }

            });

        } else {

            logger.info("No future publication dates found.");

        }

    }

    // (optionally) copy static files
    if (program.copyStaticFiles) {

        // copy all files in the static folder
        let staticDir = path.join(ol.path.site, "static");
        let pattern = path.join(staticDir, "**");
        glob(pattern, { nodir: true }, function copyFiles (err, files) {

            if (err) {
                throw err;
            }

            if (files !== [pattern]) {
                files.forEach(function processFile (file) {

                    ol.tryToCopyStaticFile(file);

                });
            }

        });

        const staticFilePatterns = [
            path.join(ol.path.pages, "**/*.css"),
            path.join(ol.path.pages, "**/!(*data).js"),
            path.join(ol.path.pages, "**/*.svg"),
            path.join(ol.path.pages, "**/*.png"),
            path.join(ol.path.pages, "**/*.(jpg|jpeg)"),
        ];

        // copy static files in the pages folder
        staticFilePatterns.forEach(function (pattern) {

            glob(pattern, function copyFiles (err, files) {

                if (err) {
                    throw err;
                }

                if (files !== [pattern]) {
                    files.forEach(function processFile (file) {

                        ol.tryToCopyStaticFile(file);

                    });
                }

            });

        });

        logger.info("Static files copied.");

    }

}
